<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://racheliee.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://racheliee.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-22T07:54:28+00:00</updated><id>https://racheliee.github.io/feed.xml</id><title type="html">Rachel Park</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">[백준] 11112 Eight Puzzle (C++)</title><link href="https://racheliee.github.io/blog/2024/boj-11112/" rel="alternate" type="text/html" title="[백준] 11112 Eight Puzzle (C++)"/><published>2024-07-21T15:09:00+00:00</published><updated>2024-07-21T15:09:00+00:00</updated><id>https://racheliee.github.io/blog/2024/boj-11112</id><content type="html" xml:base="https://racheliee.github.io/blog/2024/boj-11112/"><![CDATA[<blockquote> <p>메모리: 2468KB, 시간: 32 ms, 코드 길이: 3990B</p> </blockquote> <h1 id="문제-설명">문제 설명</h1> <ul> <li>문제 링크: <a href="https://www.acmicpc.net/problem/11112">11112 Eight Puzzle</a></li> <li>대표적인 A* Algorithm 문제 중에 하나인 8 puzzle problem이다.</li> <li>주어진 3x3 퍼즐은 무작위로 1부터 8까지의 숫자가 있고, 빈 공간은 <code class="language-plaintext highlighter-rouge">#</code>으로 마킹되어있다.</li> <li>이 빈 공간과 상하좌우 타일을 바꿔어서 아래 패턴을 맞추는 것데 드는 최소 이동의 수를 구하는 것이 목표이다. <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  1 2 3
  4 5 6
  7 8 #
</code></pre></div> </div> <p><br/></p> </li> </ul> <hr/> <h1 id="풀이">풀이</h1> <h2 id="개념">개념</h2> <p>처음에는 BFS 문제인줄 알고 접근하다가, A* algorithm에 대해 알게 되면서 이 방식으로 풀어보았다.</p> <p>A* Algorithm은 path-finding이랑 graph traversals에서 자주 사용되는 알고리즘이며 heuristic을 이용해서 가망성이 없는 선택지들을 잘라버리는 방식으로 목표에 도달한다.</p> <p>다음 두가지 변수를 사용하게 된다:</p> <ul> <li><code class="language-plaintext highlighter-rouge">g(n)</code>: 시작 node부터 마지막 node까지의 거리 <ul> <li>이 문제에서는 목표 패턴까지 걸리는 swap의 갯수가 <code class="language-plaintext highlighter-rouge">g(n)</code>이 된다</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">h(n)</code>: heuristic 값 (이건 우리가 정의를 직접하게 된다) <ul> <li>a* algorithm의 성능은 이 휴리스틱을 얼마나 잘 설계 하느냐에 따라 달라진다.</li> <li>tie가 많이나서 가지치기가 잘 안되면, 알고리즘의 성능을 떨어지게 된다!! –&gt; heuristic설계를 잘하자!!</li> </ul> </li> <li>참고로 <code class="language-plaintext highlighter-rouge">f(n) = g(n) + h(n)</code></li> </ul> <p>개인적으로 이 영상이 8 puzzle problem을 이해하는데 많이 도움이 되었다: <a href="https://www.youtube.com/watch?v=dvWk0vgHijs&amp;ab_channel=MaheshHuddar">8 Puzzle Problem (Youtube)</a></p> <h2 id="접근방식">접근방식</h2> <p>solution을 바로 보고싶다면 여기로 : <a href="#솔루션">솔루션</a></p> <h3 id="자료구조">자료구조</h3> <p>우선 <code class="language-plaintext highlighter-rouge">priority_queue</code>에 사용될 <code class="language-plaintext highlighter-rouge">Node</code>라는 struct를 선언했다:</p> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">state</span><span class="p">;</span> <span class="c1">// packed board state as a single integer (sol1에서는 int[]로 관리함)</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// empty space coordinates</span>
    <span class="kt">int</span> <span class="n">h</span><span class="p">,</span> <span class="n">g</span><span class="p">;</span>  <span class="c1">// g: depth of node, h: heuristic value (misplaced tiles)</span>

    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">emptyX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">emptyY</span><span class="p">,</span> <span class="kt">int</span> <span class="n">hVal</span><span class="p">,</span> <span class="kt">int</span> <span class="n">gVal</span><span class="p">)</span>
        <span class="o">:</span> <span class="n">state</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">x</span><span class="p">(</span><span class="n">emptyX</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">emptyY</span><span class="p">),</span> <span class="n">h</span><span class="p">(</span><span class="n">hVal</span><span class="p">),</span> <span class="n">g</span><span class="p">(</span><span class="n">gVal</span><span class="p">)</span> <span class="p">{}</span>

    <span class="c1">// Define a comparator for the priority queue</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span> <span class="o">&amp;</span><span class="n">other</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">g</span> <span class="o">+</span> <span class="n">h</span><span class="p">,</span> <span class="n">other_f</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">g</span> <span class="o">+</span> <span class="n">other</span><span class="p">.</span><span class="n">h</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">f</span> <span class="o">!=</span> <span class="n">other_f</span><span class="p">)</span> <span class="k">return</span> <span class="n">f</span> <span class="o">&gt;</span> <span class="n">other_f</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="n">g</span> <span class="o">&gt;</span> <span class="n">other</span><span class="p">.</span><span class="n">g</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <ul> <li>정렬 기준은 f = g + h이었고, tie가 나는 것을 고려해 f 값이 같을때는 g의 값을 tie-breaker로 사용했다</li> <li>tie-breaker를 사용하지 않으면 tie가 너무 자주 발생해 runtime이 너무 길었다.</li> </ul> <h3 id="a-algorithm">A* Algorithm</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>
<span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">;</span> <span class="c1">// check visited states</span>
<span class="kt">int</span> <span class="n">dx</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dy</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>

<span class="c1">// ...</span>

<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
    <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

    <span class="kt">int</span> <span class="n">cur_board</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
    <span class="n">unpack</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">state</span><span class="p">,</span> <span class="n">cur_board</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">isGoal</span><span class="p">(</span><span class="n">cur_board</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cur</span><span class="p">.</span><span class="n">g</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">dir</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">dir</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">is_oob</span><span class="p">(</span><span class="n">ny</span><span class="p">,</span> <span class="n">nx</span><span class="p">))</span>
            <span class="k">continue</span><span class="p">;</span>

        <span class="kt">int</span> <span class="n">next</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
        <span class="n">swap_tiles</span><span class="p">(</span><span class="n">cur_board</span><span class="p">,</span> <span class="n">next</span><span class="p">,</span> <span class="n">cur</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">cur</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">);</span>

        <span class="kt">int</span> <span class="n">packed_next</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">visited</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">packed_next</span><span class="p">))</span>
            <span class="k">continue</span><span class="p">;</span>

        <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">packed_next</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">calcH</span><span class="p">(</span><span class="n">next</span><span class="p">),</span> <span class="n">cur</span><span class="p">.</span><span class="n">g</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
        <span class="n">visited</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">packed_next</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>늘 그렇듯 priority_queued인 <code class="language-plaintext highlighter-rouge">pq</code>에 initial 상태를 push하고, 큐가 비어있을떄 까지 계속해서 loop를 돌게 된다</li> <li><code class="language-plaintext highlighter-rouge">visited</code>는 이미 방문한 패턴들을 저장함으로써 불필요한 탐색을 방지한다</li> <li><code class="language-plaintext highlighter-rouge">dx</code>, <code class="language-plaintext highlighter-rouge">dy</code>는 퍼즐 보드의 상하좌우를 각각 살펴보는데 이용이 된다</li> <li>while loop를 한번 살펴보자: <ul> <li>pq top에 있는 node를 pop</li> <li>pop한 노드가 우리가 찾는 패턴이라면 swap의 갯수인 <code class="language-plaintext highlighter-rouge">g</code>를 반환하고 return</li> <li>현재 node의 상하좌우 위치의 노드들을 확인</li> <li>바꾸고자하는 공간이 3x3 보드 안에 있는지를 <code class="language-plaintext highlighter-rouge">is_oob()</code>를 통해 확인</li> <li>이미 방문한 패턴이면 skip</li> <li>처음 보는 패턴이면<code class="language-plaintext highlighter-rouge">pq</code>에 추가</li> </ul> </li> </ul> <h3 id="heuristic">Heuristic</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Calculate heuristic value (Manhattan distance)</span>
<span class="kt">int</span> <span class="nf">calcH</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">h</span> <span class="o">+=</span> <span class="n">abs</span><span class="p">(</span><span class="n">i</span> <span class="o">/</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">target</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">target</span> <span class="o">%</span> <span class="mi">3</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>저는 heuristic은 manhattan distance를 사용을 하였는데, 이 외에도 number of misplace tiles 등 다른 heuristic을 사용하셔도 됩니다.</li> </ul> <h3 id="impossible-patterns">Impossible Patterns</h3> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">isSolvable</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">board</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">inv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="o">++</span><span class="n">inv</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">inv</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// if inv is even, it is solvable</span>
<span class="p">}</span>
</code></pre></div></div> <ul> <li>모든 8 puzzle problem의 배열이 solvable하진 않다</li> <li>찾아보니 inversion의 갯수가 홀수이면 그 패턴은 solve할수가 없다고 한다.</li> <li>inversion이란 목표 상태에서 반대로 되어 있는 경우이다 <ul> <li>ex: 마지막 배열이 8 6 7이라면 (8, 6), (8, 7) 2개의 inversion이 존재한다</li> </ul> </li> </ul> <h3 id="miscellaneous">Miscellaneous</h3> <p>이 문제는 path를 요구하지 않기 때문에 따로 parent를 저장하는 자료구조는 두지 않았다. 만약에 두어야한다면 unordered_map을 이용해서 parent랑 child를 저장하고, 나중에 재귀함수로 path를 찾으면 된다.</p> <h2 id="시행착오">시행착오</h2> <ol> <li>처음에는 <code class="language-plaintext highlighter-rouge">vector&lt;int&gt;</code>를 사용했지만 ⇒ 시간초과</li> <li><code class="language-plaintext highlighter-rouge">vector&lt;int&gt;</code>보다 빠른 <code class="language-plaintext highlighter-rouge">int[9]</code> 이용 <ul> <li>memory를 free 안해서 ⇒ 메모리 초과</li> <li>수정하고 성공 (<a href="#sol-1">솔루션 1</a>)</li> </ul> </li> <li>실행시간 단축을 위해 아예 int로 관리 ⇒ 성공! (<a href="#sol-2---improved">솔루션 2</a>)</li> </ol> <hr/> <h1 id="솔루션">솔루션</h1> <ul> <li><strong>SOL. 1</strong>: int[]를 이용하여 solve</li> <li><strong>SOL. 2</strong>: int에 저장하는 방식으로 solve (<em>better</em>)</li> </ul> <h2 id="sol-1">SOL. 1</h2> <blockquote> <p>메모리: 54840KB, 시간: 560 ms</p> </blockquote> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
#define endl '\n'
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Custom hash function for int[9]</span>
<span class="k">struct</span> <span class="nc">ArrayHash</span> <span class="p">{</span>
    <span class="kt">size_t</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">arr</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">hash</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">hasher</span><span class="p">;</span>
        <span class="kt">size_t</span> <span class="n">seed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">seed</span> <span class="o">^=</span> <span class="n">hasher</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="mh">0x9e3779b9</span> <span class="o">+</span> <span class="p">(</span><span class="n">seed</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">seed</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">seed</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// Custom comparator for int[9]</span>
<span class="k">struct</span> <span class="nc">ArrayEqual</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">equal</span><span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">lhs</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">rhs</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// Node structure</span>
<span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">state</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span> <span class="c1">// board state</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>     <span class="c1">// empty space coordinates</span>
    <span class="kt">int</span> <span class="n">h</span><span class="p">,</span> <span class="n">g</span><span class="p">;</span>     <span class="c1">// g: depth of node, h: heuristic value (misplaced tiles)</span>

    <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">emptyX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">emptyY</span><span class="p">,</span> <span class="kt">int</span> <span class="n">hVal</span><span class="p">,</span> <span class="kt">int</span> <span class="n">gVal</span><span class="p">)</span>
        <span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">emptyX</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">emptyY</span><span class="p">),</span> <span class="n">h</span><span class="p">(</span><span class="n">hVal</span><span class="p">),</span> <span class="n">g</span><span class="p">(</span><span class="n">gVal</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">copy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">state</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Define a comparator for the priority queue</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span> <span class="o">&amp;</span><span class="n">other</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">g</span> <span class="o">+</span> <span class="n">h</span><span class="p">,</span> <span class="n">other_f</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">g</span> <span class="o">+</span> <span class="n">other</span><span class="p">.</span><span class="n">h</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">f</span> <span class="o">!=</span> <span class="n">other_f</span><span class="p">)</span> <span class="k">return</span> <span class="n">f</span> <span class="o">&gt;</span> <span class="n">other_f</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="n">g</span> <span class="o">&gt;</span> <span class="n">other</span><span class="p">.</span><span class="n">g</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">board</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">pattern</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dx</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dy</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>

<span class="c1">// Helper function</span>
<span class="kt">void</span> <span class="n">print_board</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">is_oob</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Calculate heuristic value (Manhattan distance)</span>
<span class="kt">int</span> <span class="n">calcH</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> 
            <span class="o">++</span><span class="n">h</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">swap_tiles</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ny</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">new_board</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">copy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">new_board</span><span class="p">);</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">new_board</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="p">],</span> <span class="n">new_board</span><span class="p">[</span><span class="n">ny</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">nx</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">isGoal</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">equal</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">pattern</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">isSolvable</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">inv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="o">++</span><span class="n">inv</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">inv</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// if inv is even, it is solvable</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">initX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">initY</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>
    <span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">*</span><span class="p">,</span> <span class="n">ArrayHash</span><span class="p">,</span> <span class="n">ArrayEqual</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">;</span> <span class="c1">// check visited states</span>

    <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">initX</span><span class="p">,</span> <span class="n">initY</span><span class="p">,</span> <span class="n">calcH</span><span class="p">(</span><span class="n">board</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isSolvable</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">isGoal</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">state</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">cur</span><span class="p">.</span><span class="n">g</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">dir</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">dir</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">is_oob</span><span class="p">(</span><span class="n">ny</span><span class="p">,</span> <span class="n">nx</span><span class="p">))</span>
                <span class="k">continue</span><span class="p">;</span>

            <span class="kt">int</span> <span class="n">next</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
            <span class="n">swap_tiles</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">state</span><span class="p">,</span> <span class="n">cur</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">cur</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">next</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">visited</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">next</span><span class="p">))</span>
                <span class="k">continue</span><span class="p">;</span>

            <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">calcH</span><span class="p">(</span><span class="n">next</span><span class="p">),</span> <span class="n">cur</span><span class="p">.</span><span class="n">g</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
            <span class="kt">int</span><span class="o">*</span> <span class="n">next_state</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
            <span class="n">copy</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">next</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">next_state</span><span class="p">);</span>
            <span class="n">visited</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">next_state</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">temp</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">initX</span><span class="p">,</span> <span class="n">initY</span><span class="p">;</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">temp</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
                <span class="c1">// save the # as 0</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="n">initY</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                    <span class="n">initX</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kt">int</span> <span class="n">moves</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">initX</span><span class="p">,</span> <span class="n">initY</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">moves</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"impossible"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">moves</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="sol-2---improved">SOL. 2 - Improved</h2> <blockquote> <p>메모리: 2468KB, 시간: 32 ms</p> </blockquote> <ul> <li>SOL. 1이랑은 다르게 <code class="language-plaintext highlighter-rouge">int</code>로 현재 퍼즐의 상태를 저장을 하기 때문에 <code class="language-plaintext highlighter-rouge">pack</code> &amp; <code class="language-plaintext highlighter-rouge">unpack</code>이라는 함수로 array와 int의 자료구조를 왔다 갔다 한다.</li> </ul> <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
#define endl '\n'
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// Node structure</span>
<span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">state</span><span class="p">;</span> <span class="c1">// packed board state as a single integer</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>  <span class="c1">// empty space coordinates</span>
    <span class="kt">int</span> <span class="n">h</span><span class="p">,</span> <span class="n">g</span><span class="p">;</span>  <span class="c1">// g: depth of node, h: heuristic value (misplaced tiles)</span>

    <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">emptyX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">emptyY</span><span class="p">,</span> <span class="kt">int</span> <span class="n">hVal</span><span class="p">,</span> <span class="kt">int</span> <span class="n">gVal</span><span class="p">)</span>
        <span class="o">:</span> <span class="n">state</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">x</span><span class="p">(</span><span class="n">emptyX</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">emptyY</span><span class="p">),</span> <span class="n">h</span><span class="p">(</span><span class="n">hVal</span><span class="p">),</span> <span class="n">g</span><span class="p">(</span><span class="n">gVal</span><span class="p">)</span> <span class="p">{}</span>

    <span class="c1">// Define a comparator for the priority queue</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span> <span class="o">&amp;</span><span class="n">other</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">f</span> <span class="o">=</span> <span class="n">g</span> <span class="o">+</span> <span class="n">h</span><span class="p">,</span> <span class="n">other_f</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">g</span> <span class="o">+</span> <span class="n">other</span><span class="p">.</span><span class="n">h</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">f</span> <span class="o">!=</span> <span class="n">other_f</span><span class="p">)</span> <span class="k">return</span> <span class="n">f</span> <span class="o">&gt;</span> <span class="n">other_f</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="n">g</span> <span class="o">&gt;</span> <span class="n">other</span><span class="p">.</span><span class="n">g</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">board</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">pattern</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dx</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">dy</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>

<span class="c1">// Helper function to pack the board into an integer</span>
<span class="kt">int</span> <span class="n">pack</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Helper function to unpack the integer into a board</span>
<span class="kt">void</span> <span class="n">unpack</span><span class="p">(</span><span class="kt">int</span> <span class="n">state</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">state</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Helper function</span>
<span class="kt">void</span> <span class="n">print_board</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">is_oob</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">3</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Calculate heuristic value (Manhattan distance)</span>
<span class="kt">int</span> <span class="n">calcH</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">h</span> <span class="o">+=</span> <span class="n">abs</span><span class="p">(</span><span class="n">i</span> <span class="o">/</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">target</span> <span class="o">/</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="n">abs</span><span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">target</span> <span class="o">%</span> <span class="mi">3</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">swap_tiles</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">new_board</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ny</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">copy</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">new_board</span><span class="p">);</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">new_board</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="p">],</span> <span class="n">new_board</span><span class="p">[</span><span class="n">ny</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">nx</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">isGoal</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">equal</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span> <span class="n">pattern</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">isSolvable</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="n">board</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">inv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="o">++</span><span class="n">inv</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">inv</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// if inv is even, it is solvable</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">initX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">initY</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>
    <span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">;</span> <span class="c1">// check visited states</span>

    <span class="kt">int</span> <span class="n">initial</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="n">board</span><span class="p">);</span>
    <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">initial</span><span class="p">,</span> <span class="n">initX</span><span class="p">,</span> <span class="n">initY</span><span class="p">,</span> <span class="n">calcH</span><span class="p">(</span><span class="n">board</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>
    <span class="n">visited</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">initial</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isSolvable</span><span class="p">(</span><span class="n">board</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
        <span class="n">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

        <span class="kt">int</span> <span class="n">cur_board</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
        <span class="n">unpack</span><span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">state</span><span class="p">,</span> <span class="n">cur_board</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">isGoal</span><span class="p">(</span><span class="n">cur_board</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">cur</span><span class="p">.</span><span class="n">g</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">dir</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">dir</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">is_oob</span><span class="p">(</span><span class="n">ny</span><span class="p">,</span> <span class="n">nx</span><span class="p">))</span>
                <span class="k">continue</span><span class="p">;</span>

            <span class="kt">int</span> <span class="n">next</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span>
            <span class="n">swap_tiles</span><span class="p">(</span><span class="n">cur_board</span><span class="p">,</span> <span class="n">next</span><span class="p">,</span> <span class="n">cur</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">cur</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">);</span>

            <span class="kt">int</span> <span class="n">packed_next</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">visited</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">packed_next</span><span class="p">))</span>
                <span class="k">continue</span><span class="p">;</span>

            <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">packed_next</span><span class="p">,</span> <span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">,</span> <span class="n">calcH</span><span class="p">(</span><span class="n">next</span><span class="p">),</span> <span class="n">cur</span><span class="p">.</span><span class="n">g</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
            <span class="n">visited</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">packed_next</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="n">cout</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">temp</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">initX</span><span class="p">,</span> <span class="n">initY</span><span class="p">;</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">temp</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="n">initY</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                    <span class="n">initX</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kt">int</span> <span class="n">moves</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">initX</span><span class="p">,</span> <span class="n">initY</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">moves</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"impossible"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">moves</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h1 id="참고자료">참고자료</h1> <ul> <li><a href="https://www.geeksforgeeks.org/a-search-algorithm/">A-Star Algorithm</a></li> <li><a href="https://www.youtube.com/watch?v=dvWk0vgHijs&amp;ab_channel=MaheshHuddar">8 Puzzle Problem (Youtube)</a></li> </ul>]]></content><author><name></name></author><category term="ps-posts"/><category term="baekjoon"/><summary type="html"><![CDATA[A* Algorithm을 이용한 8 puzzle problem 풀이]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://racheliee.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://racheliee.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://racheliee.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://racheliee.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://racheliee.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://racheliee.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>